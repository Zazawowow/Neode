version: '3.8'

services:
  neode-web:
    image: node:18-alpine
    working_dir: /app
    expose:
      - "80"
    ports:
      - "8100:80"
    command:
      - sh
      - -c
      - |
        set -e
        apk add --no-cache git nginx net-tools
        
        # Clone repo with submodules
        echo "Cloning repository and submodules..."
        if [ ! -d ".git" ]; then
          git clone --recurse-submodules https://github.com/Zazawowow/Neode.git .
        else
          git pull origin master || true
          git submodule update --init --recursive
        fi
        
        cd web
        
        echo "Installing all dependencies..."
        npm install --legacy-peer-deps --include=dev
        
        # Handle patch-db dependency by building it
        if [ -d "../patch-db/client" ]; then
          echo "Building patch-db dependency from source inside a subshell..."
          (
            cd ../patch-db/client && \
            echo "Creating tsconfig.json for patch-db build..." && \
            echo '{ "compilerOptions": { "target": "es2017", "module": "commonjs", "lib": ["es2017", "dom"], "declaration": true, "outDir": "./dist", "strict": false, "esModuleInterop": true, "skipLibCheck": true, "forceConsistentCasingInFileNames": true }, "include": ["lib/**/*"] }' > tsconfig.json && \
            npm ci --include=dev && \
            ./node_modules/typescript/bin/tsc
          )
        else
          echo "FATAL: patch-db/client submodule not found. Build cannot continue."
          exit 1
        fi
        
        # Ensure config.json exists
        echo "Creating config.json..."
        echo '{"enableDidFlow": true, "api": "mock"}' > config.json

        # Build the UI
        echo "Building UI application..."
        npm run build:ui
        
        # Setup nginx
        echo "Setting up nginx..."
        mkdir -p /usr/share/nginx/html
        cp -r dist/raw/ui/* /usr/share/nginx/html/
        cp -r projects/shared/assets /usr/share/nginx/html/
        
        echo '
worker_processes 1;

events {
    worker_connections 768;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen 80 default_server;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}
' > /etc/nginx/nginx.conf
        
        echo "Starting nginx..."
        exec nginx -g 'daemon off;'
    container_name: neode-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neode.rule=Host(`neode.local`)"
      - "traefik.http.routers.neode.entrypoints=web"
      - "traefik.http.services.neode.loadbalancer.server.port=80"
    networks:
      - neode-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  neode-network:
    driver: bridge