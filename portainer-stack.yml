version: '3.8'

services:
  neode-web:
    image: node:18-alpine
    working_dir: /app
    expose:
      - "80"
    ports:
      - "8100:80"
    command:
      - sh
      - -c
      - |
        set -e
        apk add --no-cache git nginx net-tools
        
        # Clone repo with submodules
        echo "Cloning repository and submodules..."
        if [ ! -d ".git" ]; then
          git clone --recurse-submodules https://github.com/Zazawowow/Neode.git .
        else
          git pull origin master || true
          git submodule update --init --recursive
        fi
        
        cd web
        
        echo "Installing all dependencies..."
        npm install --legacy-peer-deps --include=dev
        
        # Handle patch-db dependency by building it
        if [ -d "../patch-db/client" ]; then
          echo "Building patch-db dependency from source inside a subshell..."
          (
            cd ../patch-db/client && \
            echo "Creating tsconfig.json for patch-db build..." && \
            echo '{ "compilerOptions": { "target": "es2017", "module": "commonjs", "lib": ["es2017", "dom"], "declaration": true, "outDir": "./dist", "strict": false, "esModuleInterop": true, "skipLibCheck": true, "forceConsistentCasingInFileNames": true }, "include": ["lib/**/*"] }' > tsconfig.json && \
            npm ci --include=dev && \
            ./node_modules/typescript/bin/tsc
          )
        else
          echo "FATAL: patch-db/client submodule not found. Build cannot continue."
          exit 1
        fi
        
        # Ensure config.json exists with proper structure
        echo "Creating config.json..."
        echo '{
          "useMocks": true,
          "enableWidgets": false,
          "enableDidFlow": true,
          "gitHash": "container-build",
          "ui": {
            "api": {
              "url": "rpc",
              "version": "v1"
            },
            "marketplace": {
              "start9": "https://registry.start9.com/",
              "community": "https://community-registry.start9.com/"
            },
            "mocks": {
              "maskAs": "localhost",
              "maskAsHttps": false,
              "skipStartupAlerts": true
            }
          }
        }' > config.json

        # Build the UI
        echo "Building UI application..."
        npm run build:ui
        
        # Setup nginx
        echo "Setting up nginx..."
        mkdir -p /usr/share/nginx/html
        echo "Checking build output..."
        ls -la dist/raw/ui/
        echo "Copying built files to web root..."
        cp -r dist/raw/ui/* /usr/share/nginx/html/
        echo "Copying shared assets..."
        cp -r projects/shared/assets /usr/share/nginx/html/
        echo "Verifying web root contents..."
        ls -la /usr/share/nginx/html/
        
        printf '%s\n' \
          'worker_processes 1;' \
          'error_log /var/log/nginx/error.log warn;' \
          '' \
          'events {' \
          '    worker_connections 768;' \
          '}' \
          '' \
          'http {' \
          '    include       /etc/nginx/mime.types;' \
          '    default_type  application/octet-stream;' \
          '    access_log /var/log/nginx/access.log;' \
          '    sendfile on;' \
          '    keepalive_timeout 65;' \
          '    gzip on;' \
          '    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' \
          '' \
          '    server {' \
          '        listen 80 default_server;' \
          '        server_name _;' \
          '        root /usr/share/nginx/html;' \
          '        index index.html index.htm;' \
          '        error_log /var/log/nginx/error.log;' \
          '        access_log /var/log/nginx/access.log;' \
          '' \
          '        # Handle Angular SPA routes' \
          '        location / {' \
          '            try_files $$uri $$uri/ /index.html;' \
          '        }' \
          '' \
          '        # Static assets caching' \
          '        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {' \
          '            expires 1y;' \
          '            add_header Cache-Control "public, immutable";' \
          '            try_files $$uri =404;' \
          '        }' \
          '    }' \
          '}' > /etc/nginx/nginx.conf
        
        echo "Starting nginx..."
        exec nginx -g 'daemon off;'
    container_name: neode-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neode.rule=Host(`neode.local`)"
      - "traefik.http.routers.neode.entrypoints=web"
      - "traefik.http.services.neode.loadbalancer.server.port=80"
    networks:
      - neode-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  neode-network:
    driver: bridge