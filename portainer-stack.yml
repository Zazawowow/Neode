version: '3.8'

services:
  neode-web:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "8100:80"
    command: 
      - sh
      - -c
      - |
        set -e
        apk add --no-cache git nginx
        
        # Clone repo if not exists, otherwise pull updates
        if [ ! -d ".git" ]; then
          git clone https://github.com/Zazawowow/Neode.git .
        else
          git pull origin master || true
        fi
        
        cd web
        
        # Clean install with all dependencies including devDependencies
        echo "Installing all dependencies..."
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        
        # Try to build deps, but continue if it fails
        if [ -d "../patch-db/client" ]; then
          echo "Building patch-db dependencies..."
          npm run build:deps || echo "Warning: build:deps failed, continuing..."
        else
          echo "Warning: patch-db/client not found, skipping build:deps"
        fi
        
        # Build the UI
        echo "Building UI application..."
        npm run build:ui
        
        # Setup nginx
        mkdir -p /usr/share/nginx/html
        cp -r dist/raw/ui/* /usr/share/nginx/html/
        cp -r projects/shared/assets /usr/share/nginx/html/
        
        # Configure nginx
        rm -f /etc/nginx/conf.d/default.conf
        echo 'server { listen 80 default_server; server_name _; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ /index.html; } location /assets { alias /usr/share/nginx/html/assets; expires 1y; } location /health { access_log off; return 200 "healthy"; add_header Content-Type text/plain; } }' > /etc/nginx/conf.d/neode.conf
        echo 'events { worker_connections 1024; } http { include /etc/nginx/mime.types; include /etc/nginx/conf.d/*.conf; default_type application/octet-stream; }' > /etc/nginx/nginx.conf
        
        # Test and start nginx
        nginx -t
        echo "Starting nginx on port 80..."
        nginx -g 'daemon off;'
    container_name: neode-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neode.rule=Host(`neode.local`)"
      - "traefik.http.routers.neode.entrypoints=web"
      - "traefik.http.services.neode.loadbalancer.server.port=80"
    networks:
      - neode-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  neode-network:
    driver: bridge