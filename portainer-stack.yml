version: '3.8'

services:
  neode-web:
    image: node:18-alpine
    working_dir: /app
    expose:
      - "80"
    ports:
      - "8100:80"
    command:
      - sh
      - -c
      - |
        set -e
        apk add --no-cache git nginx net-tools
        
        # Clone repo with submodules
        echo "Cloning repository and submodules..."
        if [ ! -d ".git" ]; then
          git clone --recurse-submodules https://github.com/Zazawowow/Neode.git .
        else
          git pull origin master || true
          git submodule update --init --recursive
        fi
        
        cd web
        
        echo "Installing all dependencies..."
        npm install --legacy-peer-deps --include=dev
        
        # Create a working patch-db-client stub to bypass dependency issues
        echo "Creating patch-db-client stub for container deployment..."
        mkdir -p node_modules/patch-db-client
        
        echo '{"name": "patch-db-client", "version": "1.0.0", "main": "index.js", "types": "index.d.ts"}' > node_modules/patch-db-client/package.json
        
        printf '%s\n' \
          'const { of, BehaviorSubject, EMPTY } = require("rxjs");' \
          '' \
          'const mockData = {' \
          '  ui: {' \
          '    "ack-welcome": false,' \
          '    gaming: { snake: { "high-score": 0 } },' \
          '    marketplace: { "selected-url": "registry.start9.com", "known-hosts": {} },' \
          '    dev: {}' \
          '  },' \
          '  "server-info": {' \
          '    id: "mock-server",' \
          '    version: "1.0.0",' \
          '    "tor-address": "mock.onion",' \
          '    "lan-address": "localhost",' \
          '    "ip-info": { eth0: { ipv4: ["127.0.0.1"], ipv6: ["::1"] } },' \
          '    "ca-fingerprint": "mock-fingerprint",' \
          '    "status-info": { updated: false, "update-progress": null, "backup-progress": null }' \
          '  },' \
          '  "package-data": {}' \
          '};' \
          '' \
          'class PatchDB {' \
          '  constructor(source) {' \
          '    this.source = source;' \
          '    this.cache\$$ = new BehaviorSubject(mockData);' \
          '  }' \
          '  ' \
          '  watch\$$(...args) {' \
          '    if (args.length === 0) return of(mockData);' \
          '    let value = mockData;' \
          '    for (const key of args) {' \
          '      value = value && value[key];' \
          '    }' \
          '    return of(value || {});' \
          '  }' \
          '  ' \
          '  start(bootstrapper) {' \
          '    if (bootstrapper && typeof bootstrapper.init === "function") {' \
          '      bootstrapper.init();' \
          '    }' \
          '  }' \
          '  ' \
          '  stop() {}' \
          '}' \
          '' \
          'class Update {}' \
          'class Bootstrapper { init() { return { sequence: 0, data: mockData }; } update() {} }' \
          'class DBCache { constructor() { this.sequence = 0; this.data = {}; } }' \
          'class Dump {}' \
          'class Revision {}' \
          'class Operation {}' \
          'class PatchOp { static ADD = "add"; static REMOVE = "remove"; static REPLACE = "replace"; }' \
          'class RemoveOperation {}' \
          'function pathFromArray(arr) { return arr ? arr.join(".") : ""; }' \
          '' \
          'module.exports = { PatchDB, Update, Bootstrapper, DBCache, Dump, Revision, Operation, PatchOp, RemoveOperation, pathFromArray };' \
          > node_modules/patch-db-client/index.js
        
        printf '%s\n' \
          'import { Observable } from "rxjs";' \
          'export class PatchDB<T = any> {' \
          '  constructor(source: Observable<any>);' \
          '  cache\$$: Observable<T>;' \
          '  watch\$$(): Observable<T>;' \
          '  watch\$$(path: string): Observable<any>;' \
          '  start(bootstrapper: Bootstrapper<T>): void;' \
          '  stop(): void;' \
          '}' \
          'export class Update<T = any> {}' \
          'export abstract class Bootstrapper<T = any> { abstract init(): DBCache<T>; }' \
          'export interface DBCache<T = any> { sequence: number; data: T; }' \
          'export class Dump<T = any> {}' \
          'export class Revision {}' \
          'export class Operation<T = any> {}' \
          'export class PatchOp { static readonly ADD: string; static readonly REMOVE: string; static readonly REPLACE: string; }' \
          'export class RemoveOperation {}' \
          'export function pathFromArray(arr: string[]): string;' \
          > node_modules/patch-db-client/index.d.ts
        
        echo "patch-db-client stub created successfully"
        
        # Ensure config.json exists with proper structure
        echo "Creating config.json..."
        echo '{
          "useMocks": true,
          "enableWidgets": false,
          "enableDidFlow": true,
          "gitHash": "container-build",
          "ui": {
            "api": {
              "url": "rpc",
              "version": "v1"
            },
            "marketplace": {
              "start9": "https://registry.start9.com/",
              "community": "https://community-registry.start9.com/"
            },
            "mocks": {
              "maskAs": "localhost",
              "maskAsHttps": false,
              "skipStartupAlerts": true
            }
          }
        }' > config.json

        # Debug: Check what dependencies we have
        echo "Checking patch-db-client availability..."
        ls -la node_modules/patch-db-client/ 2>/dev/null || echo "patch-db-client not found in node_modules"
        
        # Build the UI with error handling
        echo "Building UI application..."
        npm run build:ui || (
          echo "Build failed, trying with different configuration..."
          npm run build:ui:dev 2>/dev/null || npm run build:ui --verbose
        )
        
        # Setup nginx
        echo "Setting up nginx..."
        mkdir -p /usr/share/nginx/html
        echo "Checking build output..."
        ls -la dist/raw/ui/
        echo "Copying built files to web root..."
        cp -r dist/raw/ui/* /usr/share/nginx/html/
        echo "Copying shared assets..."
        cp -r projects/shared/assets /usr/share/nginx/html/
        echo "Verifying web root contents..."
        ls -la /usr/share/nginx/html/
        
        printf '%s\n' \
          'worker_processes 1;' \
          'error_log /var/log/nginx/error.log warn;' \
          '' \
          'events {' \
          '    worker_connections 768;' \
          '}' \
          '' \
          'http {' \
          '    include       /etc/nginx/mime.types;' \
          '    default_type  application/octet-stream;' \
          '    access_log /var/log/nginx/access.log;' \
          '    sendfile on;' \
          '    keepalive_timeout 65;' \
          '    gzip on;' \
          '    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' \
          '' \
          '    server {' \
          '        listen 80 default_server;' \
          '        server_name _;' \
          '        root /usr/share/nginx/html;' \
          '        index index.html index.htm;' \
          '        error_log /var/log/nginx/error.log;' \
          '        access_log /var/log/nginx/access.log;' \
          '' \
          '        # Handle Angular SPA routes' \
          '        location / {' \
          '            try_files $$uri $$uri/ /index.html;' \
          '        }' \
          '' \
          '        # Static assets caching' \
          '        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {' \
          '            expires 1y;' \
          '            add_header Cache-Control "public, immutable";' \
          '            try_files $$uri =404;' \
          '        }' \
          '    }' \
          '}' > /etc/nginx/nginx.conf
        
        echo "Starting nginx..."
        exec nginx -g 'daemon off;'
    container_name: neode-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neode.rule=Host(`neode.local`)"
      - "traefik.http.routers.neode.entrypoints=web"
      - "traefik.http.services.neode.loadbalancer.server.port=80"
    networks:
      - neode-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  neode-network:
    driver: bridge